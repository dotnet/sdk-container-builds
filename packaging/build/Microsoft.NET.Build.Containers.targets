<Project>
    <Target Name="_ContainerVerifySDKVersion"
        Condition="'$(WebPublishMethod)' == 'Container' or '$(PublishProfile)' == 'DefaultContainer'"
        BeforeTargets="AfterPublish">
        <!-- If the user has opted into container publishing via their own profile (WebPublishMethod = Container) or
            via the default Profile (PublishProfile = DefaultContainer), make sure they're on a supported SDK version.
            We do the explicit profile name check here because for preview6 for example the profile didn't exist, so we
            can't rely only on the WebPublishMethod. -->
        <PropertyGroup>
            <!-- Allow preview 7, any RC, or any stable version of 7 -->
            <_IsAllowedVersion Condition="$(NETCoreSdkVersion.StartsWith('7.0.100-preview.7')) or $(NETCoreSdkVersion.StartsWith('7.0.100-rc')) or ($(NETCoreSdkVersion.StartsWith('7.0.10')) and $(NETCoreSdkVersion.Contains('-')) == false)">true</_IsAllowedVersion>
        </PropertyGroup>
        <Error Condition="'$(_IsAllowedVersion)' != 'true'" Code="CONTAINER002" Text="The current .NET SDK ($(NETCoreSdkVersion)) doesn't support containerization. Please use version 7.0.100-preview.7 or higher." />
    </Target>

    <Target Name="ComputeContainerConfig">
        <!-- Reference data about this project -->
        <PropertyGroup>
            <_IsAspNet Condition="@(ProjectCapability->Count()) > 0 and @(ProjectCapability->AnyHaveMetadataValue('Identity', 'AspNetCore'))">true</_IsAspNet>
            <_IsSelfContained Condition="'$(SelfContained)' == 'true' or '$(PublishSelfContained)' == 'true'">true</_IsSelfContained>
        </PropertyGroup>

        <!-- Compute private defaults -->
        <PropertyGroup Condition="$(ContainerBaseImage) == ''">
            <_ContainerBaseRegistry>mcr.microsoft.com</_ContainerBaseRegistry>
            <_ContainerBaseImageName Condition="'$(_IsSelfContained)' == 'true'">dotnet/runtime-deps</_ContainerBaseImageName>
            <_ContainerBaseImageName Condition="'$(_ContainerBaseImageName)' == '' and '$(_IsAspNet)' == 'true'">dotnet/aspnet</_ContainerBaseImageName>
            <_ContainerBaseImageName Condition="'$(_ContainerBaseImageName)' == ''">dotnet/runtime</_ContainerBaseImageName>
            <_ContainerBaseImageTag>$(_TargetFrameworkVersionWithoutV)</_ContainerBaseImageTag>
        </PropertyGroup>

        <PropertyGroup Label="VS defaults">
            <!-- RegistryUrl is used by existing VS targets for Docker builds - this lets us fill that void -->
            <ContainerRegistry Condition="'$(RegistryUrl)' != ''">$(RegistryUrl)</ContainerRegistry>
            <!-- PublishImageTag is used by existing VS targets for Docker builds - this lets us fill that void -->
            <ContainerImageTag Condition="'$(PublishImageTag)' != ''">$(PublishImageTag)</ContainerImageTag>
        </PropertyGroup>

        <!-- Container Defaults -->
        <PropertyGroup>
            <ContainerBaseImage Condition="'$(ContainerBaseImage)' == ''">$(_ContainerBaseRegistry)/$(_ContainerBaseImageName):$(_ContainerBaseImageTag)</ContainerBaseImage>

            <!-- An empty ContainerRegistry implies pushing to the local daemon, putting this here for documentation purposes -->
            <!-- <ContainerRegistry></ContainerRegistry> -->

            <!-- Note: spaces will be replaced with '-' in ContainerImageName and ContainerImageTag -->
            <ContainerImageName Condition="'$(ContainerImageName)' == ''">$(AssemblyName)</ContainerImageName>
            <!-- Only default a tag name if no tag names at all are provided -->
            <ContainerImageTag Condition="'$(ContainerImageTag)' == '' and '$(ContainerImageTags)' == ''">$(Version)</ContainerImageTag>
            <ContainerImageTag Condition="'$(AutoGenerateImageTag)' == 'true'">$([System.DateTime]::UtcNow.ToString('yyyyMMddhhmmss'))</ContainerImageTag>
            <ContainerWorkingDirectory Condition="'$(ContainerWorkingDirectory)' == ''">/app</ContainerWorkingDirectory>
            <!-- Could be semicolon-delimited -->
        </PropertyGroup>

        <ItemGroup Label="Entrypoint Assignment">
            <!-- For non-apphosts, we need to invoke `dotnet` `workingdir/app` as separate args -->
            <ContainerEntrypoint Condition="'$(ContainerEntrypoint)' == '' and '$(UseAppHost)' != 'true'" Include="dotnet;$(ContainerWorkingDirectory)/$(TargetFileName)" />
            <!-- For apphosts, we need to invoke `workingdir/app` as a single arg -->
            <ContainerEntrypoint Condition="'$(ContainerEntrypoint)' == '' and '$(UseAppHost)' == 'true'" Include="$(ContainerWorkingDirectory)/$(AssemblyName)$(_NativeExecutableExtension)" />
        </ItemGroup>

        <ItemGroup Label="Conventional Label assignment">
            <ContainerLabel Include="org.opencontainers.image.created" Value="$([System.DateTime]::UtcNow.ToString('o'))" />
        </ItemGroup>

        <!-- Asp.NET defaults -->
        <ItemGroup Label="ASP.NET port forwarding" Condition="'$(_IsAspNet)' == 'true'">
            <ContainerPort Include="80" Type="tcp" Condition="@(ContainerPort->WithMetadataValue('Identity', '80')->AnyHaveMetadataValue('Type', 'tcp')) == ''" />

            <ContainerEnvironmentVariable Include="ASPNETCORE_URLS" Value="http://+:80"
                                                                    Condition="@(ContainerEnvironmentVariable->WithMetadataValue('Identity', 'ASPNETCORE_URLS')) == ''"/>
        </ItemGroup>

        <ParseContainerProperties FullyQualifiedBaseImageName="$(ContainerBaseImage)"
                                  ContainerRegistry="$(ContainerRegistry)"
                                  ContainerImageName="$(ContainerImageName)"
                                  ContainerImageTag="$(ContainerImageTag)"
                                  ContainerImageTags="$(ContainerImageTags)"
                                  ContainerEnvironmentVariables="@(ContainerEnvironmentVariable)">

            <Output TaskParameter="ParsedContainerRegistry" PropertyName="ContainerBaseRegistry" />
            <Output TaskParameter="ParsedContainerImage" PropertyName="ContainerBaseName" />
            <Output TaskParameter="ParsedContainerTag" PropertyName="ContainerBaseTag" />
            <Output TaskParameter="NewContainerRegistry" PropertyName="ContainerRegistry" />
            <Output TaskParameter="NewContainerImageName" PropertyName="ContainerImageName" />
            <Output TaskParameter="NewContainerTags" ItemName="ContainerImageTags" />
            <Output TaskParameter="NewContainerEnvironmentVariables" ItemName="ContainerEnvironmentVariables" />
        </ParseContainerProperties>
    </Target>

    <PropertyGroup>
        <PublishContainerDependsOn>
            _ContainerVerifySDKVersion;
            ComputeContainerConfig
        </PublishContainerDependsOn>
    </PropertyGroup>

    <Target Name="PublishContainer" DependsOnTargets="$(PublishContainerDependsOn)">

        <PropertyGroup Condition="'$(DOTNET_HOST_PATH)' == ''">
            <DotNetHostDirectory>$(NetCoreRoot)</DotNetHostDirectory>
            <DotNetHostFileName>dotnet</DotNetHostFileName>
            <DotNetHostFileName Condition="'$(OS)' == 'Windows_NT'">dotnet.exe</DotNetHostFileName>
        </PropertyGroup>

        <CreateNewImage ContainerizeDirectory="$(ContainerizeFolder)"
                        ToolPath="$(DotNetHostDirectory)"
                        ToolExe="$(DotNetHostFileName)"
                        BaseRegistry="$(ContainerBaseRegistry)"
                        BaseImageName="$(ContainerBaseName)"
                        BaseImageTag="$(ContainerBaseTag)"
                        OutputRegistry="$(ContainerRegistry)"
                        ImageName="$(ContainerImageName)"
                        ImageTags="@(ContainerImageTags)"
                        PublishDirectory="$(PublishDir)"
                        WorkingDirectory="$(ContainerWorkingDirectory)"
                        Entrypoint="@(ContainerEntrypoint)"
                        EntrypointArgs="@(ContainerEntrypointArgs)"
                        Labels="@(ContainerLabel)"
                        ExposedPorts="@(ContainerPort)"
                        ContainerEnvironmentVariables="@(ContainerEnvironmentVariables)" />
    </Target>
</Project>