<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AmazonRegistryFailed" xml:space="preserve">
    <value>Request to Amazon Elastic Container Registry failed prematurely. This is often caused when the target repository does not exist in the registry.</value>
  </data>
  <data name="BlobUploadFailed" xml:space="preserve">
    <value>Failed to upload blob to {0}; received {1} with detail {2}.</value>
  </data>
  <data name="CouldntDeserializeJsonToken" xml:space="preserve">
    <value>Could not deserialize token from JSON.</value>
  </data>
  <data name="DockerInfoFailed" xml:space="preserve">
    <value>Failed to get docker info({0})\n{1}\n{2}</value>
  </data>
  <data name="DockerProcessCreationFailed" xml:space="preserve">
    <value>Failed creating docker process.</value>
  </data>
  <data name="DontKnowHowToPullImages" xml:space="preserve">
    <value>Don't know how to pull images from local daemons at the moment.</value>
  </data>
  <data name="FailedRetrievingCredentials" xml:space="preserve">
    <value>Failed retrieving credentials for "{0}": {1}</value>
  </data>
  <data name="ImageLoadFailed" xml:space="preserve">
    <value>Failed to load image to local Docker daemon. stdout: {0}</value>
  </data>
  <data name="InvalidImageName" xml:space="preserve">
    <value>The first character of the image name must be a lowercase letter or a digit.</value>
  </data>
  <data name="InvalidTokenResponse" xml:space="preserve">
    <value>Token response had neither token nor access_token.</value>
  </data>
  <data name="MissingLayerNode" xml:space="preserve">
    <value>Tried to get layer information but there is no layer node?</value>
  </data>
  <data name="MissingLinkToRegistry" xml:space="preserve">
    <value>Unable to download layer with descriptor '{0}' from registry '{1}' because it does not exist.</value>
  </data>
  <data name="NoRequestUriSpecified" xml:space="preserve">
    <value>No RequestUri specified.</value>
  </data>
  <data name="RegistryPushFailed" xml:space="preserve">
    <value>Registry push failed.</value>
  </data>
  <data name="TooManyRetries" xml:space="preserve">
    <value>Too many retries, stopping.</value>
  </data>
  <data name="UnknownDaemonType" xml:space="preserve">
    <value>Unknown local container daemon type '{0}'. Valid local container daemon types are {1}.</value>
  </data>
  <data name="UnknownMediaType" xml:space="preserve">
    <value>The manifest for {0}:{1} from registry {2} was an unknown type: {3}. Please raise an issue at https://github.com/dotnet/sdk-container-builds/issues with this message.</value>
  </data>
  <data name="UnrecognizedMediaType" xml:space="preserve">
    <value>Unrecognized mediaType '{0}'.</value>
  </data>
  <data name="_Test" xml:space="preserve">
    <value>Value for unit test {0}</value>
    <comment>Used only for unit test</comment>
  </data>
</root>
